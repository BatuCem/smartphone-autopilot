import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.CvType;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;

public class EKF {
    private Mat Q;
    private Mat R;
    private Mat x_apriori;
    private Mat x_aposteriori;
    private Mat P_apriori;
    private Mat P_aposteriori;
    private Mat H;
    private boolean firstMeasurement;
    private boolean correctTime;

    public EKF(float Qq, float Qw, float Rr) {
        this.Q = Mat.eye(7, 7, CvType.CV_32F);
        for (int i = 0; i < 4; i++) {
            this.Q.put(i, i, Qq);
        }
        for (int i = 4; i < 7; i++) {
            this.Q.put(i, i, Qw);
        }
        this.R = Mat.eye(4, 4, CvType.CV_32F).mul(new MatOfFloat(Rr));
        this.x_apriori = Mat.zeros(7, 1, CvType.CV_32F);
        this.x_aposteriori = Mat.zeros(7, 1, CvType.CV_32F);
        this.P_apriori = new Mat(this.Q.size(), this.Q.type());
        this.P_aposteriori = new Mat(this.Q.size(), this.Q.type());
        this.Q.copyTo(this.P_apriori);
        this.Q.copyTo(this.P_aposteriori);
        this.H = Mat.zeros(4, 7, CvType.CV_32F);
        for (int i = 0; i < 4; i++) {
            this.H.put(i, i, 1.0);
        }
        this.firstMeasurement = true;
        this.correctTime = true;
    }
}

public Mat jacobian(float[] w, float dt) {
    Mat F = Mat.zeros(7, 7, CvType.CV_32F);
    // 1st row
    F.put(0, 0, 1.0);
    F.put(0, 1, -0.5 * (w[0] - this.x_apriori.get(4, 0)[0]) * dt);
    F.put(0, 2, -0.5 * (w[1] - this.x_apriori.get(5, 0)[0]) * dt);
    F.put(0, 3, -0.5 * (w[2] - this.x_apriori.get(6, 0)[0]) * dt);
    F.put(0, 4, 0.5 * dt * this.x_apriori.get(1, 0)[0]);
    F.put(0, 5, 0.5 * dt * this.x_apriori.get(2, 0)[0]);
    F.put(0, 6, 0.5 * dt * this.x_apriori.get(3, 0)[0]);

    // 2nd row
    F.put(1, 0, 0.5 * (w[0] - this.x_apriori.get(4, 0)[0]) * dt);
    F.put(1, 1, 1);
    F.put(1, 2, 0.5 * (w[2] - this.x_apriori.get(6, 0)[0]) * dt);
    F.put(1, 3, -0.5 * (w[1] - this.x_apriori.get(5, 0)[0]) * dt);
    F.put(1, 4, -0.5 * dt * this.x_apriori.get(0, 0)[0]);
    F.put(1, 5, 0.5 * dt * this.x_apriori.get(3, 0)[0]);
    F.put(1, 6, -0.5 * dt * this.x_apriori.get(2, 0)[0]);

    // 3rd row
    F.put(2, 0, 0.5 * (w[1] - this.x_apriori.get(5, 0)[0]) * dt);
    F.put(2, 1, -0.5 * (w[2] - this.x_apriori.get(6, 0)[0]) * dt);
    F.put(2, 2, 1);
    F.put(2, 3, 0.5 * (w[0] - this.x_apriori.get(4, 0)[0]) * dt);
    F.put(2, 4, -0.5 * dt * this.x_apriori.get(3, 0)[0]);
    F.put(2, 5, -0.5 * dt * this.x_apriori.get(0, 0)[0]);
    F.put(2, 6, 0.5 * dt * this.x_apriori.get(1, 0)[0]);

    // 4th row
    F.put(3, 0, 0.5 * (w[2] - this.x_apriori.get(6, 0)[0]) * dt);
    F.put(3, 1, 0.5 * (w[1] - this.x_apriori.get(5, 0)[0]) * dt);
    F.put(3, 2, -0.5 * (w[0] - this.x_apriori.get(4, 0)[0]) * dt);
    F.put(3, 3, 1);
    F.put(3, 4, 0.5 * dt * this.x_apriori.get(2, 0)[0]);
    F.put(3, 5, -0.5 * dt * this.x_apriori.get(1, 0)[0]);
    F.put(3, 6, -0.5 * dt * this.x_apriori.get(0, 0)[0]);

    F.put(4, 4, 1.0);

    F.put(5, 5, 1.0);

    F.put(6, 6, 1.0);
    return F;
}

public Mat state(float[] w, float dt) {
    Mat F = new Mat(7, 1, CvType.CV_32F);
    F.put(4, 0, this.x_aposteriori.get(4, 0));
    F.put(5, 0, this.x_aposteriori.get(5, 0));
    F.put(6, 0, this.x_aposteriori.get(6, 0));
    Mat A = new Mat(4, 4, CvType.CV_32F);

    A.put(0, 0, 1.0);
    A.put(0, 1, -0.5 * (w[0] - F.get(4, 0)) * dt);
    A.put(0, 2, -0.5 * (w[1] - F.get(5, 0)) * dt);
    A.put(0, 3, -0.5 * (w[2] - F.get(6, 0)) * dt);

    A.put(1, 0, 0.5 * (w[0] - F.get(4, 0)) * dt);
    A.put(1, 1, 1);
    A.put(1, 2, 0.5 * (w[2] - F.get(6, 0)) * dt);
    A.put(1, 3, -0.5 * (w[1] - F.get(5, 0)) * dt);
    A.put(2, 0, 0.5 * (w[1] - F.get(5, 0)[0]) * dt);
    A.put(2, 1, -0.5 * (w[2] - F.get(6, 0)[0]) * dt);
    A.put(2, 2, 1);
    A.put(2, 3, 0.5 * (w[0] - F.get(4, 0)[0]) * dt);

    A.put(3, 0, 0.5 * (w[2] - F.get(6, 0)[0]) * dt);
    A.put(3, 1, 0.5 * (w[1] - F.get(5, 0)[0]) * dt);
    A.put(3, 2, -0.5 * (w[0] - F.get(4, 0)[0]) * dt);
    A.put(3, 3, 1);

    Mat x = new Mat(this.x_aposteriori, new Rect(0, 0, 1, 4));
    Core.gemm(A, x, 1, new Mat(), 0, x);
    for (int i = 0; i < 4; i++)
        F.put(i, 0, x.get(i, 0)[0]);
    return F;
}
public class EKF {
    private boolean correctTime;
    private Mat x_apriori;
    private Mat P_apriori;
    private Mat P_aposteriori;
    private Mat Q;

    public void predict(float[] inputArray, float _dt, float[] currentEstimate) {
        if (!correctTime) {
            this.x_apriori = state(inputArray, _dt);
            Mat F = jacobian(inputArray, _dt);
            this.P_apriori = F.mul(this.P_aposteriori).mul(F.t()).add(this.Q);
            correctTime = true;
        }
        for (int i = 0; i < 4; i++) {
            currentEstimate[i] = (float) this.x_aposteriori.get(i, 0)[0];
        }
    }

    private Mat state(float[] inputArray, float _dt) {
        // implementation of state function
    }

    private Mat jacobian(float[] inputArray, float _dt) {
        // implementation of jacobian function
    }
}
void EKF::correct(float * addrZ, float *currentEstimate) {
    // Converting measurement
    cv::Mat z = cv::Mat::eye(4, 1, CV_32F);
    for (int i = 0; i < 4; i++)
        z.at<float>(i) = addrZ[i];

    if (firstMeasurement) {
        firstMeasurement = false;
        correctTime = false;
        for (int i = 0; i < 4; i++) {
            this->x_aposteriori.at<float>(i) = z.at<float>(i);
        }
    } else if (correctTime) {
        correctTime = false;

        // Additional variables
        cv::Mat I = cv::Mat::eye(7, 7, CV_32F);
        cv::Mat K = cv::Mat::zeros(7, 4, CV_32F);

        K = (this->P_apriori * this->H.t())
                * (this->H * this->P_apriori * this->H.t() + this->R).inv();
        this->x_aposteriori = this->x_apriori
                + K * (z - this->H * this->x_apriori);
        this->P_aposteriori = (I - K * this->H) * this->P_apriori;
    }
    for (int i = 0; i < 4; i++)
        currentEstimate[i] = this->x_aposteriori.at<float>(i);
}
